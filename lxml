import os
import shutil
import re
from collections import defaultdict

def parse_xml_with_regex(xml_path):
    """
    Парсим XML с помощью регулярных выражений, минуя стандартные парсеры
    """
    services_data = defaultdict(list)
    
    try:
        with open(xml_path, 'r', encoding='utf-8', errors='replace') as f:
            content = f.read()
        
        # Ищем все записи между тегами <record> и </record>
        records = re.findall(r'<record>(.*?)</record>', content, re.DOTALL)
        
        for record in records:
            try:
                # Извлекаем данные с помощью регулярных выражений
                id_match = re.search(r'<id>(.*?)</id>', record, re.DOTALL)
                service_match = re.search(r'<service>(.*?)</service>', record, re.DOTALL)
                topic_match = re.search(r'<topic>(.*?)</topic>', record, re.DOTALL)
                
                id_val = id_match.group(1).strip() if id_match else ''
                service = service_match.group(1).strip() if service_match else ''
                topic = topic_match.group(1).strip() if topic_match else ''
                
                # Извлекаем все вложения
                attachments = re.findall(r'<attachments>(.*?)</attachments>', record, re.DOTALL)
                attachments = [att.strip() for att in attachments if att.strip()]
                
                # Добавляем в словарь сервисов
                services_data[service].append({
                    'id': id_val,
                    'topic': topic,
                    'attachments': attachments
                })
                
            except Exception as e:
                print(f"Ошибка при обработке записи: {e}")
                continue
                
    except Exception as e:
        print(f"Ошибка при чтении файла: {e}")
        
    return services_data

def filter_and_organize_files(xml_path, data_folder, target_base_folder, service_mapping, extensions_to_keep):
    """
    Основная функция для фильтрации и организации файлов
    """
    try:
        # Парсим XML с помощью регулярных выражений
        services_data = parse_xml_with_regex(xml_path)
        
        # Создаем базовую целевую папку
        if not os.path.exists(target_base_folder):
            os.makedirs(target_base_folder)
        
        # Собираем все файлы из data_folder
        try:
            all_files = set(os.listdir(data_folder))
        except Exception as e:
            print(f"Ошибка при чтении папки с файлами: {e}")
            return None
        
        # Словари для отслеживания
        files_to_keep = set()
        files_to_delete = set(all_files)
        
        # Проходим по всем сервисам и записям
        for service, records in services_data.items():
            # Пропускаем ненужные сервисы
            if service not in service_mapping:
                continue
                
            for record in records:
                for attachment in record['attachments']:
                    _, ext = os.path.splitext(attachment)
                    
                    # Проверяем расширение файла
                    if ext.lower() in extensions_to_keep and attachment in all_files:
                        files_to_keep.add(attachment)
                        if attachment in files_to_delete:
                            files_to_delete.remove(attachment)
        
        # Удаляем ненужные файлы
        for filename in files_to_delete:
            file_path = os.path.join(data_folder, filename)
            try:
                if os.path.exists(file_path):
                    os.remove(file_path)
                    print(f"Удален файл: {filename}")
            except Exception as e:
                print(f"Ошибка при удалении файла {filename}: {e}")
        
        # Перемещаем файлы по папкам сервисов
        for service, records in services_data.items():
            if service not in service_mapping:
                continue
                
            # Получаем английское название папки из словаря
            english_folder_name = service_mapping[service]
            
            # Создаем безопасное имя папки
            safe_folder_name = "".join(c for c in english_folder_name if c.isalnum() or c in (' ', '-', '_')).rstrip()
            service_folder = os.path.join(target_base_folder, safe_folder_name)
            
            if not os.path.exists(service_folder):
                os.makedirs(service_folder)
            
            # Перемещаем файлы этого сервиса
            for record in records:
                for attachment in record['attachments']:
                    if attachment in files_to_keep:
                        src_path = os.path.join(data_folder, attachment)
                        dst_path = os.path.join(service_folder, attachment)
                        
                        try:
                            if os.path.exists(src_path):
                                shutil.move(src_path, dst_path)
                                print(f"Перемещен {attachment} в папку {safe_folder_name}")
                        except Exception as e:
                            print(f"Ошибка при перемещении файла {attachment}: {e}")
        
        # Создаем новый XML с отфильтрованными записями
        create_filtered_xml(services_data, service_mapping, extensions_to_keep, target_base_folder)
        
        print(f"\nОбработка завершена!")
        print(f"Сохранено файлов: {len(files_to_keep)}")
        print(f"Удалено файлов: {len(files_to_delete)}")
        
        return {
            'saved_files': len(files_to_keep),
            'deleted_files': len(files_to_delete)
        }
            
    except Exception as e:
        print(f"Критическая ошибка: {e}")
        import traceback
        traceback.print_exc()
        return None

def create_filtered_xml(services_data, service_mapping, extensions_to_keep, target_base_folder):
    """
    Создает новый XML файл с отфильтрованными записями
    """
    try:
        # Создаем корневой элемент
        root = '<?xml version="1.0" encoding="UTF-8"?>\n<data>\n'
        
        # Добавляем записи
        for service, records in services_data.items():
            if service not in service_mapping:
                continue
                
            for record in records:
                # Проверяем, есть ли вложения с нужными расширениями
                has_valid_attachments = False
                for attachment in record['attachments']:
                    _, ext = os.path.splitext(attachment)
                    if ext.lower() in extensions_to_keep:
                        has_valid_attachments = True
                        break
                
                if has_valid_attachments:
                    root += '  <record>\n'
                    root += f'    <id>{record["id"]}</id>\n'
                    root += f'    <service>{service}</service>\n'
                    root += f'    <topic>{record["topic"]}</topic>\n'
                    
                    for attachment in record['attachments']:
                        _, ext = os.path.splitext(attachment)
                        if ext.lower() in extensions_to_keep:
                            root += f'    <attachments>{attachment}</attachments>\n'
                    
                    root += '  </record>\n'
        
        root += '</data>'
        
        # Сохраняем XML
        new_xml_path = os.path.join(target_base_folder, "filtered_data.xml")
        with open(new_xml_path, 'w', encoding='utf-8') as f:
            f.write(root)
        
        print(f"Создан новый XML файл: {new_xml_path}")
        
    except Exception as e:
        print(f"Ошибка при создании XML: {e}")

# Использование
xml_path = '/полный/путь/к/вашему/файлу.xml'
data_folder = '/полный/путь/к/папке/с/файлами'
target_base_folder = '/полный/путь/к/целевой/папке'

# Словарь сопоставления русских названий сервисов с английскими названиями папок
service_mapping = {
    'Техническая поддержка': 'Technical_Support',
    'Бухгалтерия': 'Accounting',
    'Юридический отдел': 'Legal_Department',
    'Отдел кадров': 'HR_Department',
    'ИТ отдел': 'IT_Department'
}

# Список расширений, которые нужно сохранить (в нижнем регистре)
extensions_to_keep = ['.pdf', '.doc', '.docx', '.xls', '.xlsx', '.jpg', '.jpeg', '.png', '.txt']

# Запуск функции
stats = filter_and_organize_files(xml_path, data_folder, target_base_folder, service_mapping, extensions_to_keep)